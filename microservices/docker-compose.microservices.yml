version: '3.8'

services:
  # API Gateway
  api-gateway:
    image: kong:3.4
    ports:
      - "8000:8000"  # Proxy port
      - "8001:8001"  # Admin API port
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
    volumes:
      - ./api-gateway/kong.yml:/kong.yml:ro
    depends_on:
      - auth-service
      - emotion-service
      - conversation-service
      - ai-service
    networks:
      - microservices-network
    restart: unless-stopped

  # Auth Service
  auth-service:
    build: 
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - AUTH_DATABASE_URL=postgresql://auth_user:auth_pass@auth-db:5432/authdb
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-jwt-secret-key}
      - SERVICE_SECRET=${SERVICE_SECRET:-default-service-secret}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - auth-db
      - redis
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  auth-db:
    image: postgres:13
    environment:
      - POSTGRES_USER=auth_user
      - POSTGRES_PASSWORD=auth_pass
      - POSTGRES_DB=authdb
    volumes:
      - auth_db_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d authdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Emotion Service
  emotion-service:
    build:
      context: ./emotion-service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - AUTH_SERVICE_URL=http://auth-service:8002
      - SERVICE_SECRET=${SERVICE_SECRET:-default-service-secret}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - auth-service
      - redis
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Conversation Service
  conversation-service:
    build:
      context: ./conversation-service
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    environment:
      - CONVERSATION_DATABASE_URL=postgresql://conv_user:conv_pass@conversation-db:5432/conversationdb
      - AUTH_SERVICE_URL=http://auth-service:8001
      - EMOTION_SERVICE_URL=http://emotion-service:8003
      - SERVICE_SECRET=${SERVICE_SECRET:-default-service-secret}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - conversation-db
      - auth-service
      - emotion-service
      - redis
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  conversation-db:
    image: postgres:13
    environment:
      - POSTGRES_USER=conv_user
      - POSTGRES_PASSWORD=conv_pass
      - POSTGRES_DB=conversationdb
    volumes:
      - conversation_db_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U conv_user -d conversationdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # AI Service (Gemini Integration)
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - AUTH_SERVICE_URL=http://auth-service:8001
      - SERVICE_SECRET=${SERVICE_SECRET:-default-service-secret}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - auth-service
      - redis
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # WebSocket Service
  websocket-service:
    build:
      context: ./websocket-service
      dockerfile: Dockerfile
    ports:
      - "8006:8006"
    environment:
      - AUTH_SERVICE_URL=http://auth-service:8001
      - EMOTION_SERVICE_URL=http://emotion-service:8003
      - AI_SERVICE_URL=http://ai-service:8005
      - SERVICE_SECRET=${SERVICE_SECRET:-default-service-secret}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - auth-service
      - emotion-service
      - ai-service
      - redis
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Web Service
  web-frontend:
    build:
      context: ./web-frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=http://localhost:8006
    depends_on:
      - api-gateway
    networks:
      - microservices-network
    restart: unless-stopped

  # Shared Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

  # Monitoring and Observability
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - microservices-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - microservices-network
    restart: unless-stopped

  # Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - microservices-network
    restart: unless-stopped

  # Log Aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - microservices-network
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:7.15.0
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch
    networks:
      - microservices-network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:7.15.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - microservices-network
    restart: unless-stopped

  # Service Discovery and Health Checks
  consul:
    image: consul:1.15
    ports:
      - "8500:8500"
    command: agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0
    networks:
      - microservices-network
    restart: unless-stopped

  # Load Testing Service
  load-test:
    build:
      context: ./load-testing
      dockerfile: Dockerfile
    environment:
      - TARGET_URL=http://api-gateway:8000
      - CONCURRENT_USERS=10
      - TEST_DURATION=60s
    depends_on:
      - api-gateway
    networks:
      - microservices-network
    profiles:
      - testing

  # Message Queue (RabbitMQ)
  rabbitmq:
    image: rabbitmq:3.12-management
    ports:
      - "5672:5672"   # AMQP protocol
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=emotibot
      - RABBITMQ_DEFAULT_PASS=emotibot_pass
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Message Queue Management UI
  rabbitmq-management:
    image: rabbitmq:3.12-management
    ports:
      - "15673:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin_pass
    depends_on:
      - rabbitmq
    networks:
      - microservices-network
    restart: unless-stopped

volumes:
  auth_db_data:
    driver: local
  conversation_db_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  microservices-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Environment-specific configurations
x-common-variables: &common-variables
  SERVICE_SECRET: ${SERVICE_SECRET:-default-service-secret}
  LOG_LEVEL: ${LOG_LEVEL:-INFO}
  ENVIRONMENT: ${ENVIRONMENT:-development} 
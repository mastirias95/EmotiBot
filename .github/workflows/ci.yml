name: CI - Test & Build

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth-service, emotion-service, conversation-service, ai-service, websocket-service]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('microservices/${{ matrix.service }}/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov
        if [ -f microservices/${{ matrix.service }}/requirements.txt ]; then
          pip install -r microservices/${{ matrix.service }}/requirements.txt
        fi
        if [ -f microservices/shared-libs/requirements.txt ]; then
          pip install -r microservices/shared-libs/requirements.txt
        fi
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 microservices/${{ matrix.service }} --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 microservices/${{ matrix.service }} --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Test service health endpoint
      run: |
        cd microservices/${{ matrix.service }}
        # Simple test to ensure the app can start
        python -c "
        import sys
        import os
        sys.path.append('../shared-libs')
        try:
            from app import app
            print('✅ ${{ matrix.service }} app imports successfully')
        except Exception as e:
            print(f'❌ ${{ matrix.service }} app import failed: {e}')
            sys.exit(1)
        "

  build-images:
    needs: lint-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth-service, emotion-service, conversation-service, ai-service, websocket-service]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./microservices/${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-tests:
    needs: build-images
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      postgres-auth:
        image: postgres:13
        env:
          POSTGRES_USER: auth_user
          POSTGRES_PASSWORD: auth_pass
          POSTGRES_DB: authdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      postgres-conv:
        image: postgres:13
        env:
          POSTGRES_USER: conv_user
          POSTGRES_PASSWORD: conv_pass
          POSTGRES_DB: conversationdb
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pytest
    
    - name: Set up test environment
      run: |
        cd microservices
        cp env.microservices .env
        echo "SECRET_KEY=test-secret-key" >> .env
        echo "JWT_SECRET_KEY=test-jwt-secret-key" >> .env
        echo "SERVICE_SECRET=test-service-secret" >> .env
        echo "GEMINI_API_KEY=test-key" >> .env
    
    - name: Start test services
      run: |
        cd microservices
        docker-compose -f docker-compose.test.yml up -d
        sleep 30  # Wait for services to be ready
    
    - name: Run integration tests
      run: |
        python test-microservices.py || true  # Don't fail if some tests fail in CI
    
    - name: Check service health
      run: |
        echo "Checking service health endpoints..."
        services=("auth-service:8002" "emotion-service:8003")
        for service in "${services[@]}"; do
          if curl -f "http://localhost:${service#*:}/health"; then
            echo "✅ $service is healthy"
          else
            echo "❌ $service health check failed"
          fi
        done
    
    - name: Cleanup
      if: always()
      run: |
        cd microservices
        docker-compose -f docker-compose.test.yml down -v

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './microservices'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif' 
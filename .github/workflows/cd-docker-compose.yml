name: CD - Docker Compose Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-docker-compose:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Pull latest images
      run: |
        cd microservices
        services=("auth-service" "emotion-service" "conversation-service" "ai-service" "websocket-service")
        
        for service in "${services[@]}"; do
          echo "Pulling $service..."
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${service}:main || echo "⚠️ Image not found for $service"
        done
    
    - name: Set up environment variables
      run: |
        cd microservices
        
        # Create production-like environment file
        cat > .env.deploy <<EOF
        # Database Configuration
        AUTH_DATABASE_URL=postgresql://auth_user:${{ secrets.AUTH_DB_PASSWORD }}@postgres-auth:5432/authdb
        CONV_DATABASE_URL=postgresql://conv_user:${{ secrets.CONV_DB_PASSWORD }}@postgres-conv:5432/conversationdb
        
        # Redis Configuration
        REDIS_HOST=redis
        REDIS_PORT=6379
        
        # Service Secrets
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
        SERVICE_SECRET=${{ secrets.SERVICE_SECRET }}
        GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
        
        # Service URLs
        AUTH_SERVICE_URL=http://auth-service:8002
        EMOTION_SERVICE_URL=http://emotion-service:8003
        CONVERSATION_SERVICE_URL=http://conversation-service:8004
        AI_SERVICE_URL=http://ai-service:8005
        WEBSOCKET_SERVICE_URL=http://websocket-service:8006
        
        # Database Passwords
        AUTH_DB_PASSWORD=${{ secrets.AUTH_DB_PASSWORD }}
        CONV_DB_PASSWORD=${{ secrets.CONV_DB_PASSWORD }}
        EOF
    
    - name: Create deployment Docker Compose
      run: |
        cd microservices
        
        # Create a deployment-specific docker-compose file
        cat > docker-compose.deploy.yml <<EOF
        version: '3.8'
        
        services:
          # Databases
          postgres-auth:
            image: postgres:13
            environment:
              POSTGRES_USER: auth_user
              POSTGRES_PASSWORD: \${AUTH_DB_PASSWORD}
              POSTGRES_DB: authdb
            volumes:
              - postgres_auth_data:/var/lib/postgresql/data
            healthcheck:
              test: ["CMD-SHELL", "pg_isready -U auth_user -d authdb"]
              interval: 10s
              timeout: 5s
              retries: 5
        
          postgres-conv:
            image: postgres:13
            environment:
              POSTGRES_USER: conv_user
              POSTGRES_PASSWORD: \${CONV_DB_PASSWORD}
              POSTGRES_DB: conversationdb
            volumes:
              - postgres_conv_data:/var/lib/postgresql/data
            healthcheck:
              test: ["CMD-SHELL", "pg_isready -U conv_user -d conversationdb"]
              interval: 10s
              timeout: 5s
              retries: 5
        
          redis:
            image: redis:7-alpine
            volumes:
              - redis_data:/data
            healthcheck:
              test: ["CMD", "redis-cli", "ping"]
              interval: 10s
              timeout: 5s
              retries: 5
        
          # Microservices
          auth-service:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/auth-service:main
            environment:
              - AUTH_DATABASE_URL=\${AUTH_DATABASE_URL}
              - SECRET_KEY=\${SECRET_KEY}
              - JWT_SECRET_KEY=\${JWT_SECRET_KEY}
              - SERVICE_SECRET=\${SERVICE_SECRET}
              - REDIS_HOST=\${REDIS_HOST}
              - REDIS_PORT=\${REDIS_PORT}
            depends_on:
              postgres-auth:
                condition: service_healthy
              redis:
                condition: service_healthy
            ports:
              - "8002:8002"
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
              interval: 30s
              timeout: 10s
              retries: 3
        
          emotion-service:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/emotion-service:main
            environment:
              - AUTH_SERVICE_URL=\${AUTH_SERVICE_URL}
              - SERVICE_SECRET=\${SERVICE_SECRET}
              - REDIS_HOST=\${REDIS_HOST}
              - REDIS_PORT=\${REDIS_PORT}
            depends_on:
              auth-service:
                condition: service_healthy
              redis:
                condition: service_healthy
            ports:
              - "8003:8003"
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
              interval: 30s
              timeout: 10s
              retries: 3
        
          conversation-service:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/conversation-service:main
            environment:
              - CONV_DATABASE_URL=\${CONV_DATABASE_URL}
              - AUTH_SERVICE_URL=\${AUTH_SERVICE_URL}
              - SERVICE_SECRET=\${SERVICE_SECRET}
              - REDIS_HOST=\${REDIS_HOST}
              - REDIS_PORT=\${REDIS_PORT}
            depends_on:
              postgres-conv:
                condition: service_healthy
              auth-service:
                condition: service_healthy
              redis:
                condition: service_healthy
            ports:
              - "8004:8004"
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
              interval: 30s
              timeout: 10s
              retries: 3
        
          ai-service:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ai-service:main
            environment:
              - GEMINI_API_KEY=\${GEMINI_API_KEY}
              - AUTH_SERVICE_URL=\${AUTH_SERVICE_URL}
              - SERVICE_SECRET=\${SERVICE_SECRET}
              - REDIS_HOST=\${REDIS_HOST}
              - REDIS_PORT=\${REDIS_PORT}
            depends_on:
              auth-service:
                condition: service_healthy
              redis:
                condition: service_healthy
            ports:
              - "8005:8005"
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
              interval: 30s
              timeout: 10s
              retries: 3
        
          websocket-service:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/websocket-service:main
            environment:
              - AUTH_SERVICE_URL=\${AUTH_SERVICE_URL}
              - SERVICE_SECRET=\${SERVICE_SECRET}
              - REDIS_HOST=\${REDIS_HOST}
              - REDIS_PORT=\${REDIS_PORT}
            depends_on:
              auth-service:
                condition: service_healthy
              redis:
                condition: service_healthy
            ports:
              - "8006:8006"
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
              interval: 30s
              timeout: 10s
              retries: 3
        
        volumes:
          postgres_auth_data:
          postgres_conv_data:
          redis_data:
        
        networks:
          default:
            name: emotibot-network
        EOF
    
    - name: Deploy services
      run: |
        cd microservices
        
        # Load environment variables
        export $(cat .env.deploy | xargs)
        
        # Start services
        echo "🚀 Starting deployment..."
        docker-compose -f docker-compose.deploy.yml up -d
        
        # Wait for services to be healthy
        echo "⏳ Waiting for services to be healthy..."
        timeout 300 bash -c 'until docker-compose -f docker-compose.deploy.yml ps | grep -q "healthy"; do sleep 10; done' || echo "⚠️ Some services may not be fully healthy"
    
    - name: Run deployment tests
      run: |
        cd microservices
        
        echo "🧪 Running deployment tests..."
        
        # Test service endpoints
        services=(
          "auth-service:8002"
          "emotion-service:8003" 
          "conversation-service:8004"
          "ai-service:8005"
          "websocket-service:8006"
        )
        
        for service_port in "${services[@]}"; do
          service=$(echo $service_port | cut -d: -f1)
          port=$(echo $service_port | cut -d: -f2)
          
          echo "Testing $service on port $port..."
          
          # Test health endpoint
          if curl -f "http://localhost:$port/health" --max-time 10; then
            echo "✅ $service is healthy"
          else
            echo "❌ $service health check failed"
          fi
        done
    
    - name: Show deployment status
      if: always()
      run: |
        cd microservices
        
        echo "📊 Deployment Status:"
        docker-compose -f docker-compose.deploy.yml ps
        
        echo ""
        echo "📋 Service Logs (last 20 lines each):"
        services=("auth-service" "emotion-service" "conversation-service" "ai-service" "websocket-service")
        
        for service in "${services[@]}"; do
          echo "--- $service ---"
          docker-compose -f docker-compose.deploy.yml logs --tail=20 $service || echo "No logs for $service"
          echo ""
        done
    
    - name: Cleanup on failure
      if: failure()
      run: |
        cd microservices
        echo "🧹 Cleaning up failed deployment..."
        docker-compose -f docker-compose.deploy.yml down -v || true
    
    - name: Deployment summary
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Docker Compose deployment completed successfully!"
          echo "🌐 Services are running on:"
          echo "  - Auth Service: http://localhost:8002"
          echo "  - Emotion Service: http://localhost:8003"
          echo "  - Conversation Service: http://localhost:8004"
          echo "  - AI Service: http://localhost:8005"
          echo "  - WebSocket Service: http://localhost:8006"
        else
          echo "❌ Docker Compose deployment failed"
          echo "Check the logs above for details"
        fi 
name: CI - Dependabot (Lightweight)

on:
  pull_request:
    branches: [ main, dev ]
    # Only run for Dependabot PRs
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Only run this workflow for Dependabot
  check-actor:
    runs-on: ubuntu-latest
    outputs:
      is-dependabot: ${{ steps.check.outputs.is-dependabot }}
    steps:
    - name: Check if actor is Dependabot
      id: check
      run: |
        if [ "${{ github.actor }}" = "dependabot[bot]" ]; then
          echo "is-dependabot=true" >> $GITHUB_OUTPUT
        else
          echo "is-dependabot=false" >> $GITHUB_OUTPUT
        fi

  lint-and-test-dependabot:
    needs: check-actor
    if: needs.check-actor.outputs.is-dependabot == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth-service, emotion-service, conversation-service, ai-service, websocket-service]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.service }}-${{ hashFiles('microservices/${{ matrix.service }}/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.service }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd microservices/${{ matrix.service }}
        python -m pip install --upgrade pip
        
        # Service-specific optimized installation
        if [ "${{ matrix.service }}" = "emotion-service" ]; then
          # Optimize ML dependencies installation
          pip install --only-binary=all --no-compile --timeout=600 -r requirements.txt
        else
          pip install -r requirements.txt
        fi
    
    - name: Lint with flake8
      run: |
        cd microservices/${{ matrix.service }}
        python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        python -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test syntax and imports
      run: |
        cd microservices/${{ matrix.service }}
        
        # Basic syntax check
        python -c "import ast; ast.parse(open('app.py').read()); print('✅ Syntax valid')"
        
        # Service-specific import tests
        if [ "${{ matrix.service }}" = "auth-service" ] || [ "${{ matrix.service }}" = "conversation-service" ]; then
          python -c "from flask_sqlalchemy import SQLAlchemy; print('✅ SQLAlchemy available')"
        elif [ "${{ matrix.service }}" = "emotion-service" ]; then
          python -c "from textblob import TextBlob; print('✅ TextBlob available')"
        elif [ "${{ matrix.service }}" = "websocket-service" ]; then
          python -c "from flask_socketio import SocketIO; print('✅ SocketIO available')"
        fi
        
        echo "✅ ${{ matrix.service }} dependencies verified"

  docker-build-test:
    needs: [check-actor, lint-and-test-dependabot]
    if: needs.check-actor.outputs.is-dependabot == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth-service, emotion-service, conversation-service, ai-service, websocket-service]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image (no push)
      uses: docker/build-push-action@v5
      with:
        context: ./microservices/${{ matrix.service }}
        push: false  # Don't push for Dependabot
        tags: test-${{ matrix.service }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        echo "✅ Docker build successful for ${{ matrix.service }}"

  security-scan-dependabot:
    needs: check-actor
    if: needs.check-actor.outputs.is-dependabot == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
      continue-on-error: true
    
    - name: Dependabot summary
      run: |
        echo "✅ Dependabot PR validation complete"
        echo "- Code quality: Passed"
        echo "- Dependencies: Installed successfully"  
        echo "- Docker builds: Tested (no registry push)"
        echo "- Security scan: Completed" 
name: CD - Deploy to GCP Staging

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: emotibot-project-463521
  GKE_CLUSTER: emotibot-cluster
  GKE_REGION: europe-west1
  REGISTRY_HOSTNAME: europe-west1-docker.pkg.dev
  REPOSITORY: emotibot-repo

jobs:
  deploy-to-gcp:
    name: Deploy to GCP Staging
    runs-on: ubuntu-latest
    environment: staging
    env:
      USE_GKE_GCLOUD_AUTH_PLUGIN: True

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Setup Google Cloud CLI  
      uses: google-github-actions/setup-gcloud@v1

    - name: Install GKE auth plugin
      run: |
        gcloud components install gke-gcloud-auth-plugin --quiet

    - name: Configure Docker to use gcloud as a credential helper
      run: |
        gcloud auth configure-docker ${{ env.REGISTRY_HOSTNAME }}

    - name: Get GKE credentials
      run: |
        export USE_GKE_GCLOUD_AUTH_PLUGIN=True
        gcloud container clusters get-credentials "$GKE_CLUSTER" --region "$GKE_REGION"

    - name: Build and push Docker images
      run: |
        cd microservices
        
        services=("auth-service" "emotion-service" "conversation-service" "ai-service" "websocket-service" "frontend")
        
        for service in "${services[@]}"; do
          echo "üî® Building $service..."
          
          # Build image
          docker build -t ${{ env.REGISTRY_HOSTNAME }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${service}:${{ github.sha }} ./${service}
          docker build -t ${{ env.REGISTRY_HOSTNAME }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${service}:latest ./${service}
          
          # Push images
          docker push ${{ env.REGISTRY_HOSTNAME }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${service}:${{ github.sha }}
          docker push ${{ env.REGISTRY_HOSTNAME }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${service}:latest
          
          echo "‚úÖ $service pushed to registry"
        done

    - name: Create Kubernetes namespace
      run: |
        kubectl create namespace emotibot-staging --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy secrets
      run: |
        kubectl create secret generic emotibot-secrets \
          --from-literal=secret-key="${{ secrets.SECRET_KEY }}" \
          --from-literal=jwt-secret-key="${{ secrets.JWT_SECRET_KEY }}" \
          --from-literal=service-secret="${{ secrets.SERVICE_SECRET }}" \
          --from-literal=gemini-api-key="${{ secrets.GEMINI_API_KEY }}" \
          --from-literal=auth-database-url="${{ secrets.AUTH_DATABASE_URL }}" \
          --from-literal=conversation-database-url="${{ secrets.CONV_DATABASE_URL }}" \
          --from-literal=redis-host="${{ secrets.REDIS_HOST }}" \
          --namespace emotibot-staging \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Update deployment manifests
      run: |
        cd kubernetes
        
        # Update image references in deployment files
        services=("auth-service" "emotion-service" "conversation-service" "ai-service" "websocket-service" "frontend")
        
        echo "üîß Updating image references..."
        for service in "${services[@]}"; do
          echo "Updating $service image reference..."
          # Update images that match the pattern emotibot-{service}:latest
          sed -i "s|image: emotibot-${service}:latest|image: ${{ env.REGISTRY_HOSTNAME }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${service}:${{ github.sha }}|g" deployment-microservices.yaml
          # Also update any other variations
          sed -i "s|image: .*/${service}:.*|image: ${{ env.REGISTRY_HOSTNAME }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${service}:${{ github.sha }}|g" deployment-microservices.yaml
        done
        
        # Update ImagePullPolicy from Never to Always for GKE
        echo "üîß Updating ImagePullPolicy..."
        sed -i 's/imagePullPolicy: Never/imagePullPolicy: Always/g' deployment-microservices.yaml
        
        # Update namespace to staging
        sed -i 's/namespace: default/namespace: emotibot-staging/g' deployment-microservices.yaml
        sed -i 's/namespace: default/namespace: emotibot-staging/g' services-microservices.yaml
        
        # Show what we updated
        echo "üîç Updated deployment file preview:"
        grep -n "image:" deployment-microservices.yaml | head -10

    - name: Deploy to GKE
      run: |
        cd kubernetes
        
        echo "üöÄ Deploying microservices..."
        kubectl apply -f deployment-microservices.yaml -n emotibot-staging
        kubectl apply -f services-microservices.yaml -n emotibot-staging
        
        echo "üìã Checking deployed resources..."
        kubectl get deployments -n emotibot-staging
        
        echo "üîç Checking pod status..."
        kubectl get pods -n emotibot-staging
        
        echo "üîç Describing pods to check for issues..."
        kubectl describe pods -n emotibot-staging | head -50
        
        echo "‚è≥ Waiting for deployments to be ready (shorter timeout for debugging)..."
        # Wait for specific deployments that we know exist
        deployment_names=("emotibot-auth-service" "emotibot-emotion-service" "emotibot-conversation-service" "emotibot-ai-service" "emotibot-websocket-service" "emotibot-api-gateway")
        
        for deployment in "${deployment_names[@]}"; do
          echo "Waiting for $deployment..."
          kubectl wait --for=condition=available --timeout=60s deployment/$deployment -n emotibot-staging || {
            echo "‚ö†Ô∏è $deployment is not ready. Checking pod logs..."
            kubectl get pods -l app=$deployment -n emotibot-staging
            kubectl logs -l app=$deployment -n emotibot-staging --tail=20 || echo "No logs available yet"
            echo "Pod events for $deployment:"
            kubectl get events --field-selector involvedObject.kind=Pod -n emotibot-staging | grep $deployment || echo "No events found"
          }
        done

    - name: Deploy Kong API Gateway
      run: |
        # Create Kong ConfigMap
        kubectl create configmap kong-config \
          --from-file=kong.yml=microservices/api-gateway/kong.yml \
          --namespace emotibot-staging \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # Deploy Kong
        kubectl apply -f - <<EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: kong
          namespace: emotibot-staging
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: kong
          template:
            metadata:
              labels:
                app: kong
            spec:
              containers:
              - name: kong
                image: kong:3.4
                env:
                - name: KONG_DATABASE
                  value: "off"
                - name: KONG_DECLARATIVE_CONFIG
                  value: /kong.yml
                - name: KONG_PROXY_ACCESS_LOG
                  value: /dev/stdout
                - name: KONG_ADMIN_ACCESS_LOG
                  value: /dev/stdout
                - name: KONG_PROXY_ERROR_LOG
                  value: /dev/stderr
                - name: KONG_ADMIN_ERROR_LOG
                  value: /dev/stderr
                - name: KONG_ADMIN_LISTEN
                  value: "0.0.0.0:8001"
                - name: KONG_PROXY_LISTEN
                  value: "0.0.0.0:8000"
                ports:
                - containerPort: 8000
                - containerPort: 8001
                volumeMounts:
                - name: kong-config
                  mountPath: /kong.yml
                  subPath: kong.yml
              volumes:
              - name: kong-config
                configMap:
                  name: kong-config
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: kong
          namespace: emotibot-staging
        spec:
          type: LoadBalancer
          selector:
            app: kong
          ports:
          - name: proxy
            port: 80
            targetPort: 8000
          - name: admin
            port: 8001
            targetPort: 8001
        EOF

    - name: Get service endpoints
      run: |
        echo "üåê Getting service endpoints..."
        
        # Wait for LoadBalancer IP
        echo "Waiting for Kong LoadBalancer IP..."
        kubectl wait --for=jsonpath='{.status.loadBalancer.ingress}' service/kong -n emotibot-staging --timeout=300s || echo "LoadBalancer might still be provisioning"
        
        # Get external IP
        EXTERNAL_IP=$(kubectl get service kong -n emotibot-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
        
        echo "üìä Deployment Status:"
        kubectl get pods -n emotibot-staging
        echo ""
        kubectl get services -n emotibot-staging
        echo ""
        
        if [ "$EXTERNAL_IP" != "pending" ] && [ -n "$EXTERNAL_IP" ]; then
          echo "üéâ Application deployed successfully!"
          echo "üåê Access your application at: http://$EXTERNAL_IP"
          echo "üîß Kong Admin API: http://$EXTERNAL_IP:8001"
        else
          echo "‚è≥ LoadBalancer IP is still being assigned. Check GCP Console for the IP address."
        fi

    - name: Run health checks
      run: |
        echo "üè• Running health checks..."
        
        # Get Kong service IP
        EXTERNAL_IP=$(kubectl get service kong -n emotibot-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
        
        if [ -n "$EXTERNAL_IP" ] && [ "$EXTERNAL_IP" != "pending" ]; then
          echo "Testing Kong API Gateway at $EXTERNAL_IP..."
          
          # Test Kong health
          if curl -f --max-time 30 "http://$EXTERNAL_IP/" 2>/dev/null; then
            echo "‚úÖ Kong API Gateway is responding"
          else
            echo "‚ö†Ô∏è Kong might still be starting up"
          fi
          
          # Test Kong admin
          if curl -f --max-time 30 "http://$EXTERNAL_IP:8001/" 2>/dev/null; then
            echo "‚úÖ Kong Admin API is responding"
          else
            echo "‚ö†Ô∏è Kong Admin API might still be starting up"
          fi
        else
          echo "‚è≥ External IP not yet assigned. Health checks will be available once LoadBalancer is ready."
        fi

    - name: Deployment summary
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "üéâ GCP Staging Deployment Successful!"
          echo ""
          echo "üìã Summary:"
          echo "- ‚úÖ Docker images built and pushed to Artifact Registry"
          echo "- ‚úÖ Kubernetes deployments updated"
          echo "- ‚úÖ Services deployed to GKE cluster"
          echo "- ‚úÖ Kong API Gateway configured"
          echo "- ‚úÖ LoadBalancer provisioned"
          echo ""
          echo "üîó Next steps:"
          echo "1. Check GCP Console for LoadBalancer IP"
          echo "2. Test your microservices endpoints"
          echo "3. Monitor with GCP Monitoring"
        else
          echo "‚ùå GCP Staging Deployment Failed"
          echo "Check the logs above for details"
        fi 